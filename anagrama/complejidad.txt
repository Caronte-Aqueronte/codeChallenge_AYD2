Big O del algoritmo de Anagrama

Conversion de String a char[] = O(n)


En Java 17, Arrays.sort() usa una implementaci√≥n de Dual-Pivot Quicksort para arrays primitivos, lo que tiene una complejidad promedio de O(n log n).
Esto pued everificarse en el archivo Arrays.java:
    /**
     * Sorts the specified array into ascending numerical order.
     *
     * @implNote The sorting algorithm is a Dual-Pivot Quicksort
     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
     * offers O(n log(n)) performance on all data sets, and is typically
     * faster than traditional (one-pivot) Quicksort implementations.
     *
     * @param a the array to be sorted
     */
    public static void sort(char[] a) {
        DualPivotQuicksort.sort(a, 0, a.length);
    }

Entonces es O(n log(n))



Arrays.equals(charArray1, charArray2) tiene una complejidad O(n)

La complejidad mas grande es O(n log(n))